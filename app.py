# careerme_app.py
import streamlit as st

# D·ªØ li·ªáu g·ª£i √Ω ng√†nh theo MBTI
mbti_suggestions = {
    "INTJ": ["K·ªπ s∆∞ ph·∫ßn m·ªÅm", "Nh√† ph√¢n t√≠ch d·ªØ li·ªáu", "Nh√† khoa h·ªçc"],
    "INFP": ["Nh√† t√¢m l√Ω h·ªçc", "Nh√† vƒÉn", "Nh√¢n s·ª±"],
    "ESTP": ["Marketing", "Qu·∫£n l√Ω s·ª± ki·ªán", "B√°n h√†ng"],
    "ISFJ": ["Y t√°", "Gi√°o vi√™n", "ChƒÉm s√≥c kh√°ch h√†ng"]
}

# C√¢u h·ªèi MBTI (v√≠ d·ª•)
questions = [
    {"text": "B·∫°n th√≠ch l√†m vi·ªác m·ªôt m√¨nh h∆°n l√† l√†m vi·ªác nh√≥m?", "type": "I"},
    {"text": "B·∫°n tin v√†o tr·ª±c gi√°c h∆°n l√† th·ª±c t·∫ø?", "type": "N"},
    {"text": "B·∫°n th∆∞·ªùng quy·∫øt ƒë·ªãnh d·ª±a v√†o c·∫£m x√∫c h∆°n l√† l√Ω tr√≠?", "type": "F"},
    {"text": "B·∫°n th√≠ch m·ªçi th·ª© c√≥ k·∫ø ho·∫°ch h∆°n l√† linh ho·∫°t?", "type": "J"}
]

# B·∫Øt ƒë·∫ßu Streamlit App
st.title("üß≠ CareerMe - ·ª®ng d·ª•ng ƒê·ªãnh h∆∞·ªõng Ngh·ªÅ nghi·ªáp")
st.write("Tr·∫Øc nghi·ªám MBTI ƒë∆°n gi·∫£n gi√∫p b·∫°n hi·ªÉu r√µ b·∫£n th√¢n v√† ƒë·ªãnh h∆∞·ªõng ngh·ªÅ nghi·ªáp.")

answers = []

# Hi·ªÉn th·ªã c√¢u h·ªèi v√† thu th·∫≠p c√¢u tr·∫£ l·ªùi
for q in questions:
    agree = st.radio(q["text"], ["ƒê·ªìng √Ω", "Kh√¥ng ƒë·ªìng √Ω"], key=q["text"])
    if agree == "ƒê·ªìng √Ω":
        answers.append(q["type"])
    else:
        # N·∫øu kh√¥ng ƒë·ªìng √Ω th√¨ l·∫•y k√Ω t·ª± ƒë·ªëi l·∫≠p
        opposite = {
            "I": "E", "N": "S", "F": "T", "J": "P"
        }
        answers.append(opposite[q["type"]])

# K·∫øt qu·∫£
if st.button("üéØ Xem k·∫øt qu·∫£ MBTI v√† G·ª£i √Ω ng√†nh"):
    mbti_result = ''.join(answers)
    st.subheader(f"K·∫øt qu·∫£ MBTI c·ªßa b·∫°n l√†: *{mbti_result}*")

    suggestions = mbti_suggestions.get(mbti_result, ["ƒêang c·∫≠p nh·∫≠t ng√†nh ph√π h·ª£p..."])
    st.markdown("### üõ† Ng√†nh ngh·ªÅ g·ª£i √Ω:")
    for job in suggestions:
        st.write(f"- {job}")